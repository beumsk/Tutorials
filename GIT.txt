GIT COMMANDS



git init | git init [folder] // Turn an existing directory into a git repository
git clone [repo URL] | git clone [repo URL] [folder] // Clone an existing repository including files, branches and commits
git add [directory | file] // add directory or file to staging area
git commit -m "[message]" // commit staged changes to local repository with specified message
git push // push changes to remote repository
git status // show changes; staged, unstaged, untracked
git log // display history of commit
git diff // show changes
git fetch // retrieve changes from remote without merging
git pull // retrieve changes from remote and merge to local

git branch // list branches
git branch [branchname] // create a branch with the specified name
git branch -d [branchname] // delete the specified branch
git checkout [branchname] // switch to specified branch
git merge [branchname] // merge current branch with specified branch

git revert [commit] // create new commit undoing changes from specified commit
git reset --soft HEAD~1 // undo last commit keeping changes



/!\ It is crucial to keep sensible files (passwords, API, config, etc.) in a .gitignore file (should write paths to ignored files in .gitignore file)



Master branch handle the working code
Hotfix branch handle random bugs
Release branch handle last check before new release
Develop branch handle improvements to the code , including new features
Feature branches handle new features to be add to develop



-> create repository
-> create file
$ git init (make directory become git project)
$ git status (get status of git project)
$ git add filename (add file to staging area)
-> add some text
$ git diff filename (check differences) 
/!\ press 'q' to exit diff mode
$ git add filename (add changes to staging area)
$ git commit -m "message" (stores changes from staging area to repository with message)
$ git log (view historic of commits)

$ git show HEAD (show changes)
$ git checkout HEAD filename (restore to commit)
$ git reset HEAD filename (unstage a file from staging area)
$ git reset --soft HEAD~1
$ git log (take the first seven characters of the commit version you want)
$ git reset 7777777 (the 7 characters to reset to that commit version)

$ git branch (know what branch you are on)
$ git branch new_branch (create new branch)
$ git checkout branch_name (switch to that branch)
$ git merge branch_name (update master branch with branch changes)
/!\ if both master and branch have changed 
-> conflict -> chose the version to keep
$ git branch -d branch_name (delete branch)

$ git clone remote_location clone_name (clone the directory in a new one named)
$ cd new_directory (to get there)
$ git remote -v (list remotes)
$ git fetch (fetch changes to remote)
$ git merge origin/master (update local master)
$ git push origin your_branch_name

1. $ git fetch
2. $ git merge origin/master
3. $ git branch new_branch
4. $ git checkout new_branch
5. -> work on project
6. $ git fetch
7. $ git merge origin/master
8. $ git push origin your_branch_name
